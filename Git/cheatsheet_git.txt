Create a new repository
	create folder
	go to folder path
	git init (Create .git folder)
  git add . (Add all files to git track list)

Auto track remove all files delete outside (means delete file not use git rm)
  git add -u .

Set up first config (when finish installing git)
  Set up user name
    git config --global user.name "Tuan Le"
  Set up email
    git config --global user.email tuancnttsp@gmail.com
    

Get list git config
  git config --list

Checkout a repository (or clone remote repository to local)
	git clone /path/to/repo
	OR:
	git clone username@password@host:path/to/repo (when remote repo has credientials)

Check what file changes (summary)
	git status

Add changes to Index/stage status
	git add <filename>
	OR:
	git add . (for fast, * like .)	

Actually commit changes
	git commit -m "<comment>"
	git commit -am "<comment>": will do git add * then commit (don't have to type git add, but will only applies to all files that in track status)

Ignore tracked file temporarily:
  git update-index --assume-unchanged <path/to/file>
Start tracking again:
  git update-index --no-assume-unchanged <path/to/file>

Undo files that in staged status (when use "git add" then want to undo)
  git reset <path/to/file>

See diff part of 2 file or 2 revision of files
  git diff <revision1>:<path/to/file1> <revision2>:<path/to/file2>
  git diff <revision1> <revision2> <path/to/file1> (Often used)
  Ex:
    git diff HEAD^^ HEAD main.c

See list revision:
  git log

See list revision by format:
  git log --pretty=format:"%h - %an, %ar : %s"
  (%h: short revision, %an: author name, %ar: author date, %s: subject)

See list revision and show summary statistics:
  git log --stat
  git log --shortstat

See list revision by predefined format:
  git log --pretty=[option]
  [option]: oneline (show each commit in a single line), short, full, fuller

More useful option in "git log":
  --abbrev-commit: show SHA-1 checksum in short format
  --relative-date: relative format date
  --name-status: show the list of files affected with added/modified/deleted information as well
  -p: show patch (differences) in commit revision
  --graph: display an ASCII graph of the branch and merge history beside the log output
  [limit option]:
    --no-merges: ignore merge commit
    -<number>: show <number> revisions in list
    --since (--after): limit the commits to those made after the specified date
    --until (--before): limit the commits to those made after the specified date
    --author: only show author's commit
    --committer: only show committer's commit
  Ex:
    git log --pretty=oneline --abbrev-commit
          

See list file changes in revision (Only list file name):
  git diff-tree --name-only -r <revision>
  git ls-tree --name-only -r <revision>


